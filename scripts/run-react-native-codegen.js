#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

const root = path.resolve(__dirname, '..');
const packageJson = require(path.join(root, 'package.json'));
const codegenConfig = packageJson.codegenConfig;
const rnPath = path.join(root, 'node_modules', 'react-native');

console.log('[Decompress] üîß Running React Native Codegen check...');

// ‚úÖ Ch·ªâ ch·∫°y n·∫øu:
// 1. C√≥ react-native
// 2. C√≥ codegenConfig h·ª£p l·ªá
// 3. Kh√¥ng ƒëang ·ªü trong ch√≠nh th∆∞ vi·ªán node_modules
if (
  fs.existsSync(rnPath) &&
  codegenConfig &&
  codegenConfig.name &&
  codegenConfig.jsSrcsDir &&
  !__dirname.includes('node_modules')
) {
  try {
    console.log('[Decompress] üõ†Ô∏è Executing: npx react-native codegen');
    execSync('npx react-native codegen', {
      stdio: 'inherit',
      cwd: root,
    });
    console.log('[Decompress] ‚úÖ Codegen completed.');
  } catch (err) {
    console.warn(
      '[Decompress] ‚ö†Ô∏è Codegen failed, but may be safely ignored in consumer app:\n',
      err.message
    );
  }
} else {
  console.log(
    '[Decompress] ‚è≠Ô∏è Skipped codegen (react-native or config not found)'
  );
}
